{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NubiaFerreira\\\\Desktop\\\\extras react\\\\router-project\\\\src\\\\pages\\\\QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 'q1',\n  author: 'Shakespeare',\n  text: 'Paçocaaaaaaaaaa'\n}, {\n  id: 'q2',\n  author: 'Shakespeare',\n  text: 'Queijoooooooo'\n}];\n\nconst QuoteDetail = () => {\n  _s();\n\n  const match = useRouteMatch();\n  const params = useParams();\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getSingleQuote, true);\n  React.useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [sendRequest, params]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focused\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n\n  if (!loadedQuote.text) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No quote\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QuoteDetail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: loadedQuote.text,\n      author: loadedQuote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: \"Load Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteDetail, \"cv1Iusq+I4KeC6i/PAPIiViCiFg=\", false, function () {\n  return [useRouteMatch, useParams, useHttp];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"sources":["C:/Users/NubiaFerreira/Desktop/extras react/router-project/src/pages/QuoteDetail.js"],"names":["React","Route","useParams","Link","useRouteMatch","Comments","HighlightedQuote","LoadingSpinner","useHttp","getSingleQuote","DUMMY_QUOTES","id","author","text","QuoteDetail","match","params","sendRequest","status","data","loadedQuote","error","useEffect","quoteId","path","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,aAAjC,QAAsD,kBAAtD;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,MAAM,EAAE,aAFV;AAGEC,EAAAA,IAAI,EAAE;AAHR,CADmB,EAMnB;AACEF,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,MAAM,EAAE,aAFV;AAGEC,EAAAA,IAAI,EAAE;AAHR,CANmB,CAArB;;AAaA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,KAAK,GAAGX,aAAa,EAA3B;AACA,QAAMY,MAAM,GAAGd,SAAS,EAAxB;AAEA,QAAM;AAACe,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAAEC,WAA5B;AAAyCC,IAAAA;AAAzC,MAAkDb,OAAO,CAACC,cAAD,EAAiB,IAAjB,CAA/D;AAEAT,EAAAA,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpBL,IAAAA,WAAW,CAACD,MAAM,CAACO,OAAR,CAAX;AACD,GAFD,EAEG,CAACN,WAAD,EAAcD,MAAd,CAFH;;AAIA,MAAIE,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBACE;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAI,CAACD,WAAW,CAACP,IAAjB,EAAuB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEzB,sBACE;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEG,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEO,WAAW,CAACP,IAApC;AAA0C,MAAA,MAAM,EAAEO,WAAW,CAACR;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFH,eAGG,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEG,KAAK,CAACS,IAAK,EAA3B;AAA8B,MAAA,KAAK,MAAnC;AAAA,6BACG;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,GAAET,KAAK,CAACU,GAAI,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YAHH,eAUI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEV,KAAK,CAACS,IAAK,WAA3B;AAAA,6BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA5CD;;GAAMV,W;UACYV,a,EACCF,S,EAEyCM,O;;;KAJtDM,W;AA8CN,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom'\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nconst DUMMY_QUOTES = [\r\n  {\r\n    id: 'q1',\r\n    author: 'Shakespeare',\r\n    text: 'Paçocaaaaaaaaaa'\r\n  },\r\n  {\r\n    id: 'q2',\r\n    author: 'Shakespeare',\r\n    text: 'Queijoooooooo'\r\n  }\r\n]\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch()\r\n    const params = useParams()\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\r\n\r\n    React.useEffect(() => {\r\n      sendRequest(params.quoteId)\r\n    }, [sendRequest, params])\r\n\r\n    if (status === 'pending') {\r\n      return (\r\n        <div className='centered'>\r\n          <LoadingSpinner />  \r\n        </div>\r\n      )\r\n    }\r\n  \r\n    if (error) {\r\n      return (\r\n        <p className='centered focused'>\r\n          {error} \r\n        </p>\r\n      )\r\n    }\r\n\r\n    if (!loadedQuote.text) return <p>No quote</p>\r\n\r\n  return (\r\n    <div>\r\n        <h1>QuoteDetail</h1>\r\n       <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n       <Route path={`${match.path}`} exact>\r\n          <div className='centered'>\r\n              <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                Load Comments\r\n              </Link>\r\n          </div>\r\n       </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n            <Comments />\r\n        </Route>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuoteDetail"]},"metadata":{},"sourceType":"module"}